// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        String  @id @default(cuid())
    firstName String
    lastName  String?
    username  String?
    role      String  @default("user")
    email     String  @unique
    image_url String

    courseType   Int?
    timeMeasure  Int?
    defaultColor Int?
    language     String?

    account Account?

    tasks       Task[]
    tests       Test[]
    events      Event[]
    attachments Attachment[]

    @@map("users")
}

model Account {
    id            String  @id @default(cuid())
    userId        String  @unique
    refresh_token String? @db.Text
    access_token  String? @db.Text
    expires_at    Int?
    id_token      String? @db.Text

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("accounts")
}

model Attachment {
    id        String   @id @default(uuid())
    name      String
    type      String
    link      String
    tags      Json?
    createdAt DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@map("attachments")
}

model Task {
    id          Int     @id @default(autoincrement())
    description String
    type        String
    mode        String?
    maxScore    Int?
    subject     String
    attachments Json?

    share   Group? @relation(fields: [groupId], references: [id])
    groupId Int?

    userId String
    User   User   @relation(fields: [userId], references: [id])

    @@map("tasks")
}

model Test {
    id              Int      @id @default(autoincrement())
    questionsAmount Int?
    subjects        String[]
    contents        Json
    attachments     Json?

    share   Group? @relation(fields: [groupId], references: [id])
    groupId Int?

    userId String
    User   User   @relation(fields: [userId], references: [id])

    @@map("tests")
}

model Event {
    id          Int    @id @default(autoincrement())
    title       String
    address     String
    description String
    attachments Json?

    share   Group? @relation(fields: [groupId], references: [id])
    groupId Int?

    userId String
    User   User   @relation(fields: [userId], references: [id])

    @@map("events")
}

model Group {
    name String
    id   Int    @id @unique @default(autoincrement())

    shareLink String? @unique

    tasks  Task[]
    tests  Test[]
    events Event[]

    @@map("groups")
}
