// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        Int     @id @default(autoincrement())
    firstName String
    lastName  String?
    username  String?
    role      String  @default("user")
    email     String  @unique
    image_url String

    course       Int?
    timeMeasure  Int?
    defaultColor Int?
    language     String?

    customSubjects Subject[]

    account Account?

    tasks           Task[]
    tasksInteracted Task[] @relation(name: "task_interacted")

    attachments           Attachment[]
    attachmentsInteracted Attachment[] @relation(name: "attachment_interacted")

    groups           Group[]
    groupsInteracted Group[] @relation(name: "group_interacted")
    groupsAdmin      Group[] @relation(name: "admin")

    subgroups  Subgroup? @relation(fields: [subgroupId], references: [id])
    subgroupId String?

    @@map("users")
}

model Account {
    id           String  @id @default(uuid())
    access_token String
    expires_at   BigInt?

    google_access_token  String? @db.Text
    google_refresh_token String? @db.Text
    google_expires_at    BigInt?

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int  @unique

    @@map("accounts")
}

model Subject {
    id   String @id @unique @default(cuid())
    name String
    icon String

    isDefault Boolean @default(false)

    createdByUser User? @relation(fields: [userId], references: [id])
    userId        Int?

    tasks Task[]

    @@map("subjects")
}

model Subgroup {
    id    String @id @unique @default(uuid())
    title String

    group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId Int

    users User[]
    tasks Task[]

    @@map("subgroups")
}

model Group {
    id        Int      @id @unique @default(autoincrement())
    createdAt DateTime @default(now())

    name      String
    image_url String?

    pinnedMessage String?
    shareLink     String  @unique @default(cuid())
    private       Boolean @default(false)

    tasks Task[]

    users               User[]
    admins              User[] @relation(name: "admin")
    usersThatInteracted User[] @relation(name: "group_interacted")

    subgroups Subgroup[]

    @@map("groups")
}

model Attachment {
    id        String   @id @default(uuid())
    name      String
    type      String
    createdAt DateTime @default(now())

    tags         Int[]   @default([])
    fileId       String
    downloadLink String
    viewLink     String?

    interactedBy User[] @relation(name: "attachment_interacted")

    task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId Int

    uploadedBy User @relation(fields: [userId], references: [id])
    userId     Int

    @@map("attachments")
}

model Task {
    id Int @id @default(autoincrement())

    // Geral (general)
    type        String
    date        DateTime?
    attachments Attachment[]
    links       String[]

    // Specific and shared
    description String? // precisa ser opcional já que avaliações não têm descrição, somente as matérias
    subjects    Subject[]

    // Atividade (activity)
    mode     String?
    maxScore Int?

    // Avaliação (test)
    questionsAmount Int?
    contents        Json

    // Evento (event)
    title   String?
    address String?

    interactedBy User[] @relation(name: "task_interacted")

    group   Group? @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId Int?

    subgroup   Subgroup? @relation(fields: [subgroupId], references: [id])
    subgroupId String?

    createdBy User? @relation(fields: [userId], references: [id])
    userId    Int?

    @@map("tasks")
}
