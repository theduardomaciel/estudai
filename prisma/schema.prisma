datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    // If you want to use Prisma Migrate, you will need to manually create a shadow database
    // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
    // make sure to append ?connect_timeout=10 to the connection string
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        String   @id @unique @default(cuid())
    createdAt DateTime @default(now())
    lastSeen  DateTime @default(now()) // used to track notifications (auto-archived tasks, new comments, new group tasks, group invites, etc.)

    firstName String
    lastName  String?
    username  String?
    email     String  @unique
    image_url String?
    avatar    String? @default("google")
    course    Course?

    customSubjects Subject[]

    activities           Activity[]
    activitiesInteracted Activity[] @relation(name: "activity_interacted")

    tests           Test[]
    testsInteracted Test[] @relation(name: "test_interacted")

    events           Event[]
    eventsInteracted Event[] @relation(name: "event_interacted")

    attachments           Attachment[]
    attachmentsInteracted Attachment[] @relation(name: "attachment_interacted")

    groups           Group[]
    groupsInteracted Group[] @relation(name: "group_interacted")
    groupsAdmin      Group[] @relation(name: "admin")

    subgroups      Subgroup[]
    subgroupsAdmin Subgroup[] @relation(name: "subgroup_admin")

    announcements     Announcement[]
    comments          Comment[]
    commentsUpvoted   Comment[]      @relation(name: "upvotedComments")
    commentsDownvoted Comment[]      @relation(name: "downvotedComments")

    @@map("users")
}

enum Course {
    MIDDLE
    HIGH
    COLLEGE
}

model Subject {
    id        String   @id @unique @default(cuid())
    createdAt DateTime @default(now())

    name String
    icon String

    activities Activity[]
    tests      Test[]

    createdBy User?   @relation(fields: [userId], references: [id])
    userId    String?

    @@map("subjects")
}

model Subgroup {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())

    title       String
    description String?
    image_url   String?
    banner_url  String?

    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId String

    users  User[]
    admins User[] @relation(name: "subgroup_admin")

    activities Activity[]
    tests      Test[]
    events     Event[]

    @@map("subgroups")
}

model Group {
    id        String   @id @unique @default(cuid())
    createdAt DateTime @default(now())

    name        String
    description String?
    isPrivate   Boolean @default(false)

    image_url  String?
    banner_url String?

    pinnedMessage String?
    interactedBy  User[]  @relation(name: "group_interacted")

    users     User[]
    admins    User[]     @relation(name: "admin")
    subgroups Subgroup[]

    activities Activity[]
    tests      Test[]
    events     Event[]

    @@map("groups")
}

model Attachment {
    id        String   @id @default(uuid())
    name      String
    type      String
    createdAt DateTime @default(now())

    tags         Int[]   @default([])
    fileId       String
    downloadLink String
    viewLink     String?

    interactedBy User[] @relation(name: "attachment_interacted")

    activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
    activityId String?

    test   Test?   @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId String?

    event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String?

    uploadedBy User   @relation(fields: [userId], references: [id])
    userId     String

    @@map("attachments")
}

model Activity {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    title       String?
    description String?
    date        DateTime?
    subjects    Subject[]

    // Config
    maxScore    Float               @default(10)
    restriction ActivityRestriction @default(INDIVIDUAL)
    isMandatory Boolean             @default(false)
    privacy     TaskPrivacy         @default(PUBLIC)

    links       String[]
    attachments Attachment[]

    group      Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId    String?
    subgroup   Subgroup? @relation(fields: [subgroupId], references: [id])
    subgroupId String?

    interactedBy User[]    @relation(name: "activity_interacted")
    comments     Comment[]

    createdBy User   @relation(fields: [userId], references: [id])
    userId    String

    @@map("activities")
}

enum TaskPrivacy {
    // Individual
    PUBLIC_FULL
    PUBLIC_ATTACHMENTS
    PUBLIC
    PRIVATE
}

enum ActivityRestriction {
    INDIVIDUAL
    GROUP
}

model Test {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    date DateTime?

    title    String?
    subjects Subject[]
    contents Json
    addendum String?

    // Config
    questionsAmount      Int?
    maxScore             Float?      @default(10)
    showQuestionsAverage Boolean     @default(false)
    isMandatory          Boolean     @default(false)
    privacy              TaskPrivacy @default(PUBLIC)

    links       String[]
    attachments Attachment[]

    group      Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId    String?
    subgroup   Subgroup? @relation(fields: [subgroupId], references: [id])
    subgroupId String?

    interactedBy User[]    @relation(name: "test_interacted")
    comments     Comment[]

    createdBy User   @relation(fields: [userId], references: [id])
    userId    String

    @@map("tests")
}

model Event {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    title       String?
    description String?
    address     String?
    date        DateTime?

    links       String[]
    attachments Attachment[]

    // Config
    isMandatory Boolean     @default(false)
    privacy     TaskPrivacy @default(PUBLIC)

    group      Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId    String?
    subgroup   Subgroup? @relation(fields: [subgroupId], references: [id])
    subgroupId String?

    interactedBy User[]    @relation(name: "event_interacted")
    comments     Comment[]

    createdBy User   @relation(fields: [userId], references: [id])
    userId    String

    @@map("events")
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //comments  Comment[] @relation("comments")

    content String

    commentUpvotedBy   User[]  @relation(name: "upvotedComments")
    commentDownvotedBy User[]  @relation(name: "downvotedComments")
    isPinned           Boolean @default(false)

    activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
    activityId String?

    test   Test?   @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId String?

    event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String?

    createdBy User   @relation(fields: [userId], references: [id])
    userId    String

    @@map("comments")
}

model Announcement {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    title             String
    description       String?
    materialCondition String
    materialPrice     Int

    phone1 String?
    phone2 String?
    email  String?

    visualizationsCount Int
    isLocked            Boolean @default(false)
}
