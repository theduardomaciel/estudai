// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        Int     @id @default(autoincrement())
    firstName String
    lastName  String?
    username  String?
    role      String  @default("user")
    email     String  @unique
    image_url String

    course       Int?
    timeMeasure  Int?
    defaultColor Int?
    language     String?

    account Account?

    tasks       Task[]
    attachments Attachment[]

    groups Group[]

    markedAttachments Attachment[] @relation(name: "marked")

    tasksInteracted Task? @relation(fields: [taskId], references: [id], name: "interacted")
    taskId          Int?

    @@map("users")
}

model Account {
    id           String  @id @default(uuid())
    access_token String
    expires_at   BigInt?

    google_access_token  String? @db.Text
    google_refresh_token String? @db.Text
    google_expires_at    BigInt?

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int  @unique

    @@map("accounts")
}

model Subgroup {
    id    String @id @unique @default(uuid())
    title String

    group   Group @relation(fields: [groupId], references: [id])
    groupId Int

    tasks Task[]
}

model Group {
    name String
    id   Int    @id @unique @default(autoincrement())

    subgroups     Subgroup[]
    pinnedMessage String?
    shareLink     String     @unique @default(cuid())
    private       Boolean    @default(false)

    createdAt DateTime @default(now())
    tasks     Task[]

    users  User[]
    admins Int[] // lista contendo o id dos usuários

    @@map("groups")
}

model Attachment {
    id        String   @id @default(uuid())
    name      String
    type      String
    createdAt DateTime @default(now())

    tags         Int[]   @default([])
    fileId       String
    downloadLink String
    viewLink     String?

    markedBy User[] @relation(name: "marked")

    task   Task @relation(fields: [taskId], references: [id])
    taskId Int

    uploadedBy User @relation(fields: [userId], references: [id])
    userId     Int

    @@map("attachments")
}

model Task {
    id Int @id @default(autoincrement())

    // Geral (general)
    type        String
    date        DateTime
    attachments Attachment[]
    links       String[]

    // Specific and shared
    description String? // precisa ser opcional já que avaliações não têm descrição, somente as matérias
    subjects    Int[]

    // Atividade (activity)
    mode     String?
    maxScore Int?

    // Avaliação (test)
    questionsAmount Int?
    contents        String[]

    // Evento (event)
    title   String?
    address String?

    interactedBy User[] @relation(name: "interacted")

    group      Group?    @relation(fields: [groupId], references: [id])
    groupId    Int?
    subgroup   Subgroup? @relation(fields: [subgroupId], references: [id])
    subgroupId String?

    createdBy User? @relation(fields: [userId], references: [id])
    userId    Int?

    @@map("tasks")
}
