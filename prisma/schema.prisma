// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        Int     @id @default(autoincrement())
    firstName String
    lastName  String?
    username  String?
    role      String  @default("user")
    email     String  @unique
    image_url String

    course       Int?
    timeMeasure  Int?
    defaultColor Int?
    language     String?

    account Account?

    tasks       Task[]
    attachments Attachment[]

    groups Group[]

    @@map("users")
}

model Account {
    id           String @id @default(uuid())
    access_token String
    expires_at   Int?

    google_access_token  String? @db.Text
    google_refresh_token String? @db.Text
    google_expires_at    Int?

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int  @unique

    @@map("accounts")
}

model Group {
    name String
    id   Int    @id @unique @default(autoincrement())

    subgroups     Json[]
    pinnedMessage String
    shareLink     String? @unique
    private       Boolean @default(false)

    createdAt DateTime
    tasks     Task[]

    users  User[]
    admins Int[] // lista contendo o id dos usuários

    @@map("groups")
}

model Attachment {
    id        String   @id @default(uuid())
    name      String
    type      String
    link      String
    tags      Int[]    @default([])
    createdAt DateTime @default(now())

    createdBy User @relation(fields: [userId], references: [id])
    userId    Int

    task   Task? @relation(fields: [taskId], references: [id])
    taskId Int?

    @@map("attachments")
}

model Task {
    id Int @id @default(autoincrement())

    // Geral (general)
    subjects    Int[]
    description String? // precisa ser opcional já que avaliações não têm descrição, somente as matérias

    // Atividade (activity)
    type        String
    mode        String?
    maxScore    Int?
    attachments Attachment[]

    // Avaliação (test)
    questionsAmount Int?
    contents        Json

    // Evento (event)
    title   String?
    address String?

    concludedBy Int[]

    group   Group? @relation(fields: [groupId], references: [id])
    groupId Int?

    User   User @relation(fields: [userId], references: [id])
    userId Int

    @@map("tasks")
}
